{
  "version": 3,
  "sources": ["../src/auto-quit-app-menubar.tsx", "../src/hooks/hooks.ts", "../src/utils/constants.ts", "../node_modules/run-applescript/index.js", "../src/utils/applescript-utils.ts", "../src/types/preferences.ts"],
  "sourcesContent": ["import { Icon, launchCommand, LaunchType, MenuBarExtra, open, openCommandPreferences } from \"@raycast/api\";\nimport { quitAppsHook } from \"./hooks/hooks\";\nimport { scriptQuitApps } from \"./utils/applescript-utils\";\n\nexport default function AutoQuitAppMenubar() {\n  const { quitApps, loading } = quitAppsHook();\n\n  return (\n    <MenuBarExtra\n      icon={{\n        source: {\n          light: \"menu-bar-icon.png\",\n          dark: \"menu-bar-icon@dark.png\",\n        },\n      }}\n      isLoading={loading}\n      tooltip={\"Auto Quit App\"}\n    >\n      {quitApps.length !== 0 && (\n        <MenuBarExtra.Section title={\"Auto Quit Apps\"}>\n          {quitApps?.map((value) => {\n            return (\n              <MenuBarExtra.Item\n                key={value.name}\n                title={value.name}\n                icon={{ fileIcon: value.path }}\n                tooltip={`Open ${value.name}`}\n                onAction={async () => {\n                  await open(value.path);\n                }}\n              />\n            );\n          })}\n        </MenuBarExtra.Section>\n      )}\n      {quitApps.length !== 0 && (\n        <MenuBarExtra.Section>\n          <MenuBarExtra.Item\n            title={\"Quit All Apps\"}\n            icon={Icon.XMarkTopRightSquare}\n            shortcut={{ modifiers: [\"cmd\"], key: \"q\" }}\n            onAction={async () => {\n              await scriptQuitApps(quitApps);\n            }}\n          />\n        </MenuBarExtra.Section>\n      )}\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item\n          title={\"Set Auto Quit App\"}\n          icon={Icon.AppWindowGrid3x3}\n          shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n          onAction={() => {\n            launchCommand({\n              name: \"set-auto-quit-app\",\n              type: LaunchType.UserInitiated,\n            }).then();\n          }}\n        />\n      </MenuBarExtra.Section>\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item\n          title={\"Preferences\"}\n          icon={Icon.Gear}\n          shortcut={{ modifiers: [\"cmd\"], key: \",\" }}\n          onAction={() => {\n            openCommandPreferences().then(() => null);\n          }}\n        />\n      </MenuBarExtra.Section>\n    </MenuBarExtra>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { Application, environment, getApplications, LaunchType } from \"@raycast/api\";\nimport { CacheKey, defaultCache } from \"../utils/constants\";\nimport { scriptQuitAppsWithoutWindow } from \"../utils/applescript-utils\";\nimport { refreshInterval } from \"../types/preferences\";\n\nexport const setAutoQuitAppsHook = (refresh: number) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [quitApps, setQuitApps] = useState<Application[]>([]);\n  const [disQuitApps, setDisQuitApps] = useState<Application[]>([]);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const allApps = await getApplications();\n    const quitAppsString = defaultCache.get(CacheKey.QUIT_APP);\n    let quitApps: Application[] = [];\n    if (typeof quitAppsString == \"string\") {\n      quitApps = JSON.parse(quitAppsString);\n    }\n    const disQuitApps = allApps.filter((allApp) => !quitApps.some((quitApp) => allApp.bundleId == quitApp.bundleId));\n    setQuitApps(quitApps);\n    setDisQuitApps(disQuitApps);\n    setLoading(false);\n  }, [refresh]);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { quitApps: quitApps, disQuitApps: disQuitApps, loading: loading };\n};\n\nexport const quitAppsHook = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [quitApps, setQuitApps] = useState<Application[]>([]);\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const quitAppsString = defaultCache.get(CacheKey.QUIT_APP);\n      let quitApps: Application[] = [];\n      if (typeof quitAppsString == \"string\") {\n        quitApps = JSON.parse(quitAppsString);\n      }\n      setQuitApps(quitApps);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // Quit Apps\n    if (environment.launchType == LaunchType.Background) {\n      const refreshIntervalString = defaultCache.get(CacheKey.REFRESH_INTERVAL);\n      let realRefreshInterval = 5;\n      if (typeof refreshIntervalString == \"string\") {\n        realRefreshInterval = parseInt(refreshIntervalString);\n      }\n      if (realRefreshInterval == refreshInterval) {\n        await scriptQuitAppsWithoutWindow(quitApps);\n        defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n      } else {\n        const nextRefreshInterval = realRefreshInterval + 5;\n        if (nextRefreshInterval > refreshInterval) {\n          await scriptQuitAppsWithoutWindow(quitApps);\n          defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n        } else {\n          defaultCache.set(CacheKey.REFRESH_INTERVAL, String(nextRefreshInterval));\n        }\n      }\n    } else {\n      await scriptQuitAppsWithoutWindow(quitApps);\n      defaultCache.set(CacheKey.REFRESH_INTERVAL, \"5\");\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    void fetchData();\n  }, [fetchData]);\n\n  return { quitApps: quitApps, loading: loading };\n};\n", "import { Cache } from \"@raycast/api\";\n\nexport enum CacheKey {\n  QUIT_APP = \"Quit App\",\n  REFRESH_INTERVAL = \"Refresh Interval\",\n}\n\nexport const defaultCache = new Cache();\n", "import process from 'node:process';\nimport {promisify} from 'node:util';\nimport {execFile, execFileSync} from 'node:child_process';\n\nconst execFileAsync = promisify(execFile);\n\nexport async function runAppleScript(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst {stdout} = await execFileAsync('osascript', ['-e', script, outputArguments]);\n\treturn stdout.trim();\n}\n\nexport function runAppleScriptSync(script, {humanReadableOutput = true} = {}) {\n\tif (process.platform !== 'darwin') {\n\t\tthrow new Error('macOS only');\n\t}\n\n\tconst outputArguments = humanReadableOutput ? [] : ['-ss'];\n\n\tconst stdout = execFileSync('osascript', ['-e', script, ...outputArguments], {\n\t\tencoding: 'utf8',\n\t\tstdio: ['ignore', 'pipe', 'ignore'],\n\t\ttimeout: 500,\n\t});\n\n\treturn stdout.trim();\n}\n", "import { runAppleScript } from \"run-applescript\";\nimport { Application, getFrontmostApplication } from \"@raycast/api\";\n\nexport async function scriptQuitAppsWithoutWindow(apps: Application[]) {\n  for (let i = 0; i < apps.length; i++) {\n    try {\n      const appName = apps[i].path.split(\"/\").pop()?.replace(\".app\", \"\");\n      const hasWindow = await scriptGetAppWindow(appName);\n      const isRunning = await scriptIsRunning(appName);\n      const isFrontmost = await IsFrontmostApp(appName);\n      if (!hasWindow && isRunning && !isFrontmost) {\n        const script = `tell application \"${appName}\"\n   quit\nend tell`;\n        await runAppleScript(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport async function scriptQuitApps(apps: Application[]) {\n  for (let i = 0; i < apps.length; i++) {\n    try {\n      const appName = apps[i].path.split(\"/\").pop()?.replace(\".app\", \"\");\n\n      const isRunning = await scriptIsRunning(appName);\n      if (isRunning) {\n        const script = `tell application \"${appName}\"\n   quit\nend tell`;\n\n        await runAppleScript(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nasync function IsFrontmostApp(applicationName: string | undefined) {\n  try {\n    const app = await getFrontmostApplication();\n    return app?.name == applicationName;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nasync function scriptIsRunning(appName: string | undefined) {\n  const script = `if application \"${appName}\" is running then\n\treturn true\nelse\n\treturn false\nend if`;\n  try {\n    const isRunning = await runAppleScript(script);\n    return isRunning == \"true\";\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\nasync function scriptGetAppWindow(appName: string | undefined) {\n  const script = `set appName to \"${appName}\"\ntell application \"System Events\"\n    if not (exists process appName) then\n        return false\n    end if\n    set appProcess to first process whose name is appName\n    set appWindows to windows of appProcess\n    if length of appWindows is 0 then\n        return false\n    else\n        return true\n    end if\nend tell\n`;\n  try {\n    const hasWindow = await runAppleScript(script);\n    return hasWindow == \"true\";\n  } catch (e) {\n    return false;\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\nexport interface Preferences {\n  layout: string;\n  columns: string;\n  itemInset: string;\n  refreshInterval: number;\n}\n\nexport const { layout, columns, itemInset, refreshInterval } = getPreferenceValues<Preferences>();\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA4F,wBCA5F,IAAAC,EAAiD,iBACjDC,EAAsE,wBCDtE,IAAAC,EAAsB,wBAOf,IAAMC,EAAe,IAAI,QCPhC,IAAAC,EAAoB,6BACpBC,EAAwB,qBACxBC,EAAqC,8BAE/BC,KAAgB,aAAU,UAAQ,EAExC,eAAsBC,EAAeC,EAAQ,CAAC,oBAAAC,EAAsB,EAAI,EAAI,CAAC,EAAG,CAC/E,GAAI,EAAAC,QAAQ,WAAa,SACxB,MAAM,IAAI,MAAM,YAAY,EAG7B,IAAMC,EAAkBF,EAAsB,CAAC,EAAI,CAAC,KAAK,EAEnD,CAAC,OAAAG,CAAM,EAAI,MAAMN,EAAc,YAAa,CAAC,KAAME,EAAQG,CAAe,CAAC,EACjF,OAAOC,EAAO,KAAK,CACpB,CCdA,IAAAC,EAAqD,wBAErD,eAAsBC,EAA4BC,EAAqB,CACrE,QAASC,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAC/B,GAAI,CACF,IAAMC,EAAUF,EAAKC,CAAC,EAAE,KAAK,MAAM,GAAG,EAAE,IAAI,GAAG,QAAQ,OAAQ,EAAE,EAC3DE,EAAY,MAAMC,EAAmBF,CAAO,EAC5CG,EAAY,MAAMC,EAAgBJ,CAAO,EACzCK,EAAc,MAAMC,EAAeN,CAAO,EAChD,GAAI,CAACC,GAAaE,GAAa,CAACE,EAAa,CAC3C,IAAME,EAAS,qBAAqBP;AAAA;AAAA,UAGpC,MAAMQ,EAAeD,CAAM,EAE/B,OAASE,EAAP,CACA,QAAQ,MAAMA,CAAC,CACjB,CAEJ,CAEA,eAAsBC,EAAeZ,EAAqB,CACxD,QAASC,EAAI,EAAGA,EAAID,EAAK,OAAQC,IAC/B,GAAI,CACF,IAAMC,EAAUF,EAAKC,CAAC,EAAE,KAAK,MAAM,GAAG,EAAE,IAAI,GAAG,QAAQ,OAAQ,EAAE,EAGjE,GADkB,MAAMK,EAAgBJ,CAAO,EAChC,CACb,IAAMO,EAAS,qBAAqBP;AAAA;AAAA,UAIpC,MAAMQ,EAAeD,CAAM,EAE/B,OAASE,EAAP,CACA,QAAQ,MAAMA,CAAC,CACjB,CAEJ,CAEA,eAAeH,EAAeK,EAAqC,CACjE,GAAI,CAEF,OADY,QAAM,2BAAwB,IAC9B,MAAQA,CACtB,OAASF,EAAP,CACA,eAAQ,MAAMA,CAAC,EACR,EACT,CACF,CAEA,eAAeL,EAAgBJ,EAA6B,CAC1D,IAAMO,EAAS,mBAAmBP;AAAA;AAAA;AAAA;AAAA,QAKlC,GAAI,CAEF,OADkB,MAAMQ,EAAeD,CAAM,GACzB,MACtB,OAASE,EAAP,CACA,eAAQ,MAAMA,CAAC,EACR,EACT,CACF,CACA,eAAeP,EAAmBF,EAA6B,CAC7D,IAAMO,EAAS,mBAAmBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAclC,GAAI,CAEF,OADkB,MAAMQ,EAAeD,CAAM,GACzB,MACtB,MAAE,CACA,MAAO,EACT,CACF,CCtFA,IAAAK,EAAoC,wBASvB,CAAE,OAAAC,EAAQ,QAAAC,EAAS,UAAAC,EAAW,gBAAAC,CAAgB,KAAI,uBAAiC,EJuBzF,IAAMC,EAAe,IAAM,CAChC,GAAM,CAACC,EAASC,CAAU,KAAI,YAAkB,EAAI,EAC9C,CAACC,EAAUC,CAAW,KAAI,YAAwB,CAAC,CAAC,EAEpDC,KAAY,eAAY,SAAY,CACxCH,EAAW,EAAI,EACf,GAAI,CACF,IAAMI,EAAiBC,EAAa,cAAqB,EACrDJ,EAA0B,CAAC,EAC3B,OAAOG,GAAkB,WAC3BH,EAAW,KAAK,MAAMG,CAAc,GAEtCF,EAAYD,CAAQ,CACtB,OAASK,EAAP,CACA,QAAQ,MAAMA,CAAC,CACjB,CAGA,GAAI,cAAY,YAAc,aAAW,WAAY,CACnD,IAAMC,EAAwBF,EAAa,sBAA6B,EACpEG,EAAsB,EAI1B,GAHI,OAAOD,GAAyB,WAClCC,EAAsB,SAASD,CAAqB,GAElDC,GAAuBC,EACzB,MAAMC,EAA4BT,CAAQ,EAC1CI,EAAa,uBAA+B,GAAG,MAC1C,CACL,IAAMM,EAAsBH,EAAsB,EAC9CG,EAAsBF,GACxB,MAAMC,EAA4BT,CAAQ,EAC1CI,EAAa,uBAA+B,GAAG,GAE/CA,EAAa,uBAA+B,OAAOM,CAAmB,CAAC,QAI3E,MAAMD,EAA4BT,CAAQ,EAC1CI,EAAa,uBAA+B,GAAG,EAEjDL,EAAW,EAAK,CAClB,EAAG,CAAC,CAAC,EAEL,sBAAU,IAAM,CACTG,EAAU,CACjB,EAAG,CAACA,CAAS,CAAC,EAEP,CAAE,SAAUF,EAAU,QAASF,CAAQ,CAChD,EDxEI,IAAAa,EAAA,6BAJW,SAARC,GAAsC,CAC3C,GAAM,CAAE,SAAAC,EAAU,QAAAC,CAAQ,EAAIC,EAAa,EAE3C,SACE,QAAC,gBACC,KAAM,CACJ,OAAQ,CACN,MAAO,oBACP,KAAM,wBACR,CACF,EACA,UAAWD,EACX,QAAS,gBAER,UAAAD,EAAS,SAAW,MACnB,OAAC,eAAa,QAAb,CAAqB,MAAO,iBAC1B,SAAAA,GAAU,IAAKG,MAEZ,OAAC,eAAa,KAAb,CAEC,MAAOA,EAAM,KACb,KAAM,CAAE,SAAUA,EAAM,IAAK,EAC7B,QAAS,QAAQA,EAAM,OACvB,SAAU,SAAY,CACpB,QAAM,QAAKA,EAAM,IAAI,CACvB,GANKA,EAAM,IAOb,CAEH,EACH,EAEDH,EAAS,SAAW,MACnB,OAAC,eAAa,QAAb,CACC,mBAAC,eAAa,KAAb,CACC,MAAO,gBACP,KAAM,OAAK,oBACX,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EACzC,SAAU,SAAY,CACpB,MAAMI,EAAeJ,CAAQ,CAC/B,EACF,EACF,KAEF,OAAC,eAAa,QAAb,CACC,mBAAC,eAAa,KAAb,CACC,MAAO,oBACP,KAAM,OAAK,iBACX,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EACzC,SAAU,IAAM,IACd,iBAAc,CACZ,KAAM,oBACN,KAAM,aAAW,aACnB,CAAC,EAAE,KAAK,CACV,EACF,EACF,KACA,OAAC,eAAa,QAAb,CACC,mBAAC,eAAa,KAAb,CACC,MAAO,cACP,KAAM,OAAK,KACX,SAAU,CAAE,UAAW,CAAC,KAAK,EAAG,IAAK,GAAI,EACzC,SAAU,IAAM,IACd,0BAAuB,EAAE,KAAK,IAAM,IAAI,CAC1C,EACF,EACF,GACF,CAEJ",
  "names": ["auto_quit_app_menubar_exports", "__export", "AutoQuitAppMenubar", "__toCommonJS", "import_api", "import_react", "import_api", "import_api", "defaultCache", "import_node_process", "import_node_util", "import_node_child_process", "execFileAsync", "runAppleScript", "script", "humanReadableOutput", "process", "outputArguments", "stdout", "import_api", "scriptQuitAppsWithoutWindow", "apps", "i", "appName", "hasWindow", "scriptGetAppWindow", "isRunning", "scriptIsRunning", "isFrontmost", "IsFrontmostApp", "script", "runAppleScript", "e", "scriptQuitApps", "applicationName", "import_api", "layout", "columns", "itemInset", "refreshInterval", "quitAppsHook", "loading", "setLoading", "quitApps", "setQuitApps", "fetchData", "quitAppsString", "defaultCache", "e", "refreshIntervalString", "realRefreshInterval", "refreshInterval", "scriptQuitAppsWithoutWindow", "nextRefreshInterval", "import_jsx_runtime", "AutoQuitAppMenubar", "quitApps", "loading", "quitAppsHook", "value", "scriptQuitApps"]
}
